// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Contract struct {
	Archived bool     `json:"archived"`
	End      string   `json:"end"`
	ID       int      `json:"id"`
	Name     string   `json:"name"`
	HexColor string   `json:"hexColor"`
	Start    string   `json:"start"`
	Skills   []*Skill `json:"skills"`
	Groups   []*Group `json:"groups"`
}

type Group struct {
	ID        int         `json:"id"`
	Name      string      `json:"name"`
	Contracts []*Contract `json:"contracts"`
	Students  []*Student  `json:"students"`
}

type Skill struct {
	ContractID    int             `json:"contractId"`
	ID            int             `json:"id"`
	Name          string          `json:"name"`
	Contract      *Contract       `json:"contract"`
	StudentSkills []*StudentSkill `json:"studentSkills"`
}

type Student struct {
	Owner         *User           `json:"owner"`
	OwnerID       string          `json:"ownerID"`
	FirstName     string          `json:"firstName"`
	LastName      string          `json:"lastName"`
	StudentSkills []*StudentSkill `json:"studentSkills"`
	Groups        []*Group        `json:"groups"`
}

type StudentSkill struct {
	SkillID   int      `json:"skillID"`
	StudentID string   `json:"studentID"`
	Mark      Mark     `json:"mark"`
	Skill     *Skill   `json:"skill"`
	Student   *Student `json:"student"`
}

type Teacher struct {
	Owner     *User  `json:"owner"`
	OwnerID   string `json:"ownerID"`
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type User struct {
	Username string     `json:"username"`
	Password string     `json:"password"`
	Role     Role       `json:"role"`
	Student  []*Student `json:"Student"`
	Teacher  []*Teacher `json:"Teacher"`
}

type Mark string

const (
	MarkTodo Mark = "TODO"
	MarkGood Mark = "GOOD"
	MarkBad  Mark = "BAD"
)

var AllMark = []Mark{
	MarkTodo,
	MarkGood,
	MarkBad,
}

func (e Mark) IsValid() bool {
	switch e {
	case MarkTodo, MarkGood, MarkBad:
		return true
	}
	return false
}

func (e Mark) String() string {
	return string(e)
}

func (e *Mark) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Mark(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Mark", str)
	}
	return nil
}

func (e Mark) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleTeacher Role = "TEACHER"
	RoleStudent Role = "STUDENT"
	RoleAdmin   Role = "ADMIN"
)

var AllRole = []Role{
	RoleTeacher,
	RoleStudent,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleTeacher, RoleStudent, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
