// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"kontrakt-server/prisma/db"
	"strconv"
)

type AuthPayload struct {
	Token string `json:"token"`
	User  *User  `json:"user"`
}

type FilterGroup struct {
	IdsIn []int `json:"idsIn"`
}

type StudentInput struct {
	FirstName string `json:"firstName"`
	LastName  string `json:"lastName"`
}

type User struct {
	Username string            `json:"username"`
	Role     Role              `json:"role"`
	Student  []db.StudentModel `json:"student"`
	Teacher  []db.TeacherModel `json:"teacher"`
}

type UserInput struct {
	Password string `json:"password"`
}

type Mark string

const (
	MarkTodo      Mark = "TODO"
	MarkToFinish  Mark = "TO_FINISH"
	MarkToCorrect Mark = "TO_CORRECT"
	MarkGood      Mark = "GOOD"
	MarkVeryGood  Mark = "VERY_GOOD"
	MarkBad       Mark = "BAD"
	MarkVeryBad   Mark = "VERY_BAD"
)

var AllMark = []Mark{
	MarkTodo,
	MarkToFinish,
	MarkToCorrect,
	MarkGood,
	MarkVeryGood,
	MarkBad,
	MarkVeryBad,
}

func (e Mark) IsValid() bool {
	switch e {
	case MarkTodo, MarkToFinish, MarkToCorrect, MarkGood, MarkVeryGood, MarkBad, MarkVeryBad:
		return true
	}
	return false
}

func (e Mark) String() string {
	return string(e)
}

func (e *Mark) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Mark(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Mark", str)
	}
	return nil
}

func (e Mark) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Role string

const (
	RoleTeacher Role = "TEACHER"
	RoleStudent Role = "STUDENT"
	RoleAdmin   Role = "ADMIN"
)

var AllRole = []Role{
	RoleTeacher,
	RoleStudent,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleTeacher, RoleStudent, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
