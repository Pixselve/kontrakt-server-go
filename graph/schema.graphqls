# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @isLoggedIn on FIELD_DEFINITION
directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Contract {
    archived: Boolean! @hasRole(role: TEACHER)
    end: String!
    id: Int!
    name: String!
    hexColor: String!
    start: String!
    skills: [Skill!]! @goField(forceResolver: true)
    groups: [Group!]! @goField(forceResolver: true)
}

type Group {
    id: Int!
    name: String!
    contracts: [Contract!]! @goField(forceResolver: true)
    students: [Student!]! @goField(forceResolver: true)
}

type Skill {
    contractId: Int!
    id: Int!
    name: String!
    contract: Contract!
    studentSkills: [StudentSkill!]! @goField(forceResolver: true)
}

type StudentSkill {
    skillID: Int!
    studentID: String!
    mark: Mark!
    skill: Skill! @goField(forceResolver: true)
    student: Student! @goField(forceResolver: true)
}

type Student {
    owner: User!
    ownerUsername: String!
    firstName: String!
    lastName: String!
    studentSkills: [StudentSkill!]! @goField(forceResolver: true)
    groups: [Group!]! @goField(forceResolver: true)
}

type Teacher {
    owner: User!
    ownerUsername: String!
    firstName: String!
    lastName: String!
}

type User {
    username: String!
    role: Role!
    student: [Student!]! @goField(forceResolver: true)
    teacher: [Teacher!]! @goField(forceResolver: true)
}

enum Role {
    TEACHER
    STUDENT
    ADMIN
}

enum Mark {
    TODO
    TO_FINISH
    TO_CORRECT
    GOOD
    VERY_GOOD
    BAD
    VERY_BAD
}

type Query {
    contracts(groupIds: [Int!]): [Contract!]!
    groups: [Group!]!
    student(ownerUsername: String!): Student!
    contract(id: Int!): Contract!
    students(contractID: Int): [Student!]! @hasRole(role: TEACHER)
    teachers: [Teacher!]! @hasRole(role: TEACHER)
    me: User! @isLoggedIn
    studentSkills(studentUsername: String!, contractID: Int): [StudentSkill!]! @hasRole(role: TEACHER)
}
type Mutation {
    login(username: String!, password: String!): AuthPayload!
    createOneGroup(name: String!, contractID: Int): Group! @hasRole(role: TEACHER)
    updateOneContract(contractID: Int!, groupIDs: [Int!]): Contract! @hasRole(role: TEACHER)
    createOneSkill(name: String!, contractID: Int!): Skill! @hasRole(role: TEACHER)
    deleteOneSkill(id: Int!): Skill! @hasRole(role: TEACHER)
    updateOneSkill(skillID: Int!, name: String): Skill! @hasRole(role: TEACHER)
    updateOneStudent(ownerUsername: String!, groupIDs: [Int!]): Student! @hasRole(role: TEACHER)
    createOneContract(end: String!, name: String!, hexColor: String!, start: String!, skillNames: [String!]!): Contract! @hasRole(role: TEACHER)
    deleteOneContract(id: Int!): Contract! @hasRole(role: TEACHER)
    deleteOneStudent(ownerUsername: String!): Student! @hasRole(role: TEACHER)
    upsertOneSkillToStudent(studentOwnerUsername: String!, skillID: Int!, mark: Mark!): StudentSkill! @hasRole(role: TEACHER)
    createOneStudent(student: StudentInput!, user: UserInput!): Student! @hasRole(role: TEACHER)
}

input StudentInput {
    firstName: String!
    lastName: String!
}
input UserInput {
    password: String!
}

type AuthPayload {
    token: String!
    user: User!
}