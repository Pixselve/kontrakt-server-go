# GraphQL schema example
#
# https://gqlgen.com/getting-started/

directive @hasRole(role: Role!) on FIELD_DEFINITION
directive @goField(
    forceResolver: Boolean
    name: String
) on INPUT_FIELD_DEFINITION | FIELD_DEFINITION

type Contract {
    archived: Boolean! @hasRole(role: TEACHER)
    end: String!
    id: Int!
    name: String!
    hexColor: String!
    start: String!
    skills: [Skill!]! @goField(forceResolver: true)
    groups: [Group!]! @goField(forceResolver: true)
}

type Group {
    id: Int!
    name: String!
    contracts: [Contract!]!
    students: [Student!]!
}

type Skill {
    contractId: Int!
    id: Int!
    name: String!
    contract: Contract!
    studentSkills: [StudentSkill!]!
}

type StudentSkill {
    skillID: Int!
    studentID: String!
    mark: Mark!
    skill: Skill!
    student: Student!
}

type Student {
    owner: User!
    ownerUsername: String!
    firstName: String!
    lastName: String!
    studentSkills: [StudentSkill!]! @goField(forceResolver: true)
    groups: [Group!]! @goField(forceResolver: true)
}

type Teacher {
    owner: User!
    ownerUsername: String!
    firstName: String!
    lastName: String!
}

type User {
    username: String!
    role: Role!
    student: [Student!]!
    teacher: [Teacher!]!
}

enum Role {
    TEACHER
    STUDENT
    ADMIN
}

enum Mark {
    TODO
    GOOD
    BAD
}

type Query {
    contracts(groupIds: [Int!]): [Contract!]!
    groups: [Group!]!
    student(ownerUsername: String!): Student!
    contract(id: Int!): Contract!
    students: [Student!]!
    teachers: [Teacher!]!
    me: User!
}
type Mutation {
    login(username: String!, password: String!): AuthPayload!
}

type AuthPayload {
    token: String!
    user: User!
}